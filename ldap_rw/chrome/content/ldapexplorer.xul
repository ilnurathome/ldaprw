<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<!DOCTYPE prefwindow SYSTEM "chrome://ldaprw/locale/options.dtd">              
<window id="yourwindow" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
onload="onLoad();">

  <script type="application/x-javascript" src="chrome://ldaprw/content/abtoldap.js"/> 
  <script type="application/x-javascript" src="chrome://ldaprw/content/ldaptoab.js"/> 
  <script type="application/x-javascript" src="chrome://ldaprw/content/ldapsource.js"/> 
  <script type="application/x-javascript" src="chrome://ldaprw/content/sync.js"/>
  <script type="application/x-javascript" src="chrome://ldaprw/content/prefs.js"/>

<script type="text/javascript">
<![CDATA[
var prefs=null;
var curpref=null;
var ldap=null;
var getpassword=null;
var mapper=null;
var gQueryURIFormat = null;    
var attrs=null;               
var queryURL=null;
var abManager = null;
var mybook = null;

const numbermsg=10;


var searchformat="";                            

function gengetpassword(prePath, uri) {
    return function() {
      var passwordManager = Components.classes["@mozilla.org/login-manager;1"].
                         getService(Components.interfaces.nsILoginManager);
      var logins = passwordManager.findLogins( {}, prePath, null, uri); 
      return logins[0].password;
    };
}

function onLoad() {
    var menu = document.getElementById("ldapservers");
    prefs = getprefs();   
    for (var i in prefs) menu.appendItem(i);    
                
    mapper = new LdaptoAB();
    abManager = Components.classes["@mozilla.org/abmanager;1"].getService(Components.interfaces.nsIAbManager);

    searchformat = "(|";
    attrs = new Array(); 
    for (var i in mapper.__proto__) { 
      if ( i == "dn" ) continue;
      attrs[attrs.length] = i; 
      searchformat += "(" + i + "=*@V*" + ")";
    };
    searchformat += ")";    

   //dump("searchformat=" + searchformat + "\n");

    document.getElementById('add').disabled=true;                           
   document.getElementById('addall').disabled=true;                     
   document.getElementById('morelabel').disabled=true;                     
    var tree = document.getElementById('cardlist');
    tree.view = cardtreeView;   
}

function selectServer(label) {
    curpref=prefs[label];
    Init();
}

function Init(){
    queryURL = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService).newURI(curpref.uri, null, null).QueryInterface(Components.interfaces.nsILDAPURL);
   
    mybook = abManager.getDirectory( "moz-abmdbdirectory://" + curpref.filename ); 

    getpassword = gengetpassword(queryURL.prePath, curpref.uri);
    ldap = new LdapDataSource();
    ldap.init(attrs, numbermsg+1);
//    alert (searchformat);
//    alert (searchformat.replace(/@V/g, "string") );
   document.getElementById('morelabel').disabled=true;                        

    var searchformattmp = "" ;
    var classes = curpref.objClasses.replace(/\s*/g, '').split(',');
    for (var i in classes) { 
      searchformattmp += "(objectClass=" + classes[i] + ")";
    };
//    searchformat = "(&" + searchformattmp + searchformat + ")";
//     dump(searchformat);
}

function gensearchquery(queries) {
  var querycount = 0;
  return function (aMsg) {
       dump("searchquery:" + queries + "\t" + querycount + "\t" + queries.length  + "\n")
       if (aMsg != undefined ){
              dump("aMsg.errorCode:"+aMsg.errorCode + "\n");
              if (aMsg.errorCode == 4){
                    document.getElementById('morelabel').disabled=false;
              }else {
                    document.getElementById('morelabel').disabled=true;
              }
       }
       if ( querycount < queries.length ) {        
        return queries[querycount++];
      }
      return null;
  }
}

function gencallbacksearchresult(tree, attrs){
      return function(aMsg){           
           dump("callbacksearchresult:" + aMsg.dn + attrs + "\n");
           var cell = new Array();
           cell["aMsg"] = aMsg;
           cell["dn"] = aMsg.dn;
           dump("attrs:" + aMsg.getAttributes({}) + "\n" );
           for (var i in attrs) {
              try{
                dump("callbacksearchresult: attr=" + i + "\t"+ attrs[i]);
                var val=aMsg.getValues ( attrs[i], {});
                if ( val != null) {
                       cell[ attrs[i] ] = val.toString();
                }
              }catch(e){
                    //dump(e+"\n");
                    dump(" not exist");
              }finally{ 
                    dump("\n");
              }
           } 
           if ( tree == undefined) dump("Error\n");
           dump("callbacksearchresult: tree.treeData.length= " + tree.treeData.length+  "\n");
           tree.treeData[tree.treeData.length] = cell;
           tree.treebox.rowCountChanged(0, 1);
     }
}

   function onEnterInSearchBar(value){
       document.getElementById('add').disabled=true;                     
       document.getElementById('addall').disabled=true;                     
       document.getElementById('morelabel').disabled=true;                     
        if ( ldap == null ){
             alert("Choose Ldap server before");
             return;
       }

        cardtreeView.treebox.rowCountChanged(0, -cardtreeView.treeData.length);
        cardtreeView.treeData = new Array();
         if (value == "") return;

           var filter = searchformat.replace(/@V/g, value);
        try {
            queryURL.filter = filter;
            //dump(queryURL.spec + "\n");
            ldap.query(queryURL, curpref.binddn, getpassword, 
                                gensearchquery([queryURL.dn]),  
                                 gencallbacksearchresult(cardtreeView, 
                                                            ["cn","mail", "sn", "givenName"] ));
        } catch (e) {
    dump ("Error: " + e + "\n" );
        } 
   }

var cardtreeView = {
       treeData: [],
       get rowCount() { return this.treeData.length;},
      //rowCount: 1,

      treeBox: null,  

    getCellText : function(row,column){
           return this.treeData[row][column.id];
    },

    setTree: function(treebox){ this.treebox = treebox; },
    isContainer: function(row){ return false; },
    isSeparator: function(row){ return false; },
    isSorted: function(){ return false; },
    getLevel: function(row){ return 0; },
    getImageSrc: function(row,col){ return null; },
    getRowProperties: function(row,props){},
    getCellProperties: function(row,col,props){},
    getColumnProperties: function(colid,col,props){}
}

function doselect(){
       document.getElementById('add').disabled=false;                     
       document.getElementById('addall').disabled=false;                     
}

function doAdd() {
    var tree = document.getElementById('cardlist');
    dump("doAdd:" + tree.tagName + "\n");
    var start = new Object();
    var end = new Object();
    var numRanges = tree.view.selection.getRangeCount();

  for (var t = 0; t < numRanges; t++){
    tree.view.selection.getRangeAt(t,start,end);
    for (var v = start.value; v <= end.value; v++){
      dump("Item " + v + " is selected.\t" + cardtreeView.treeData[v].dn+"\n");
      try{
           if ( addcardfromldap(curpref, cardtreeView.treeData[v].aMsg, true) ) {
            dump("card allready exists, sync it.");
            }
       }catch(e){
            dump("Error:"+e+"\n");
     }
  }
 }
}

function doAddAll() {
    
}
]]>
</script>

<groupbox flex="1">
  <caption label="Ldap Cards Explorer" />
  <vbox>
    <groupbox flex="1">
      <caption label="Servers:"/>
      <menulist id="ldapservers" label="select..." onselect="selectServer(this.selectedItem.label);"/>
    </groupbox>

   <spacer style="height: 10px" flex="1"/>

  <textbox id="tbox" emptytext="search criteries" type="search" oncommand="onEnterInSearchBar(this.value);"/>
  </vbox>


<tree flex="1" id="cardlist" onselect="doselect();" minheight="50">
  <treecols>
    <treecol id="cn" label="DisplayName" flex="1"/>
    <splitter class="tree-splitter"/>
    <treecol id="mail" label="Mail" flex="1"/>
    <splitter class="tree-splitter"/>
    <treecol id="sn" label="Surname" flex="1"/>
    <splitter class="tree-splitter"/>
    <treecol id="givenName" label="Name" flex="1"/>
  </treecols>
  <treechildren/>
</tree>

<hbox>
  <button id="add" label="Add" oncommand="doAdd();"/>
  <button id="addall" label="Add all" oncommand="doAddAll();"/>
   <spacer style="height: 10px" flex="1"/>
   <label id="morelabel" value="more..." disabled="true"/>
</hbox>
</groupbox>


</window>

